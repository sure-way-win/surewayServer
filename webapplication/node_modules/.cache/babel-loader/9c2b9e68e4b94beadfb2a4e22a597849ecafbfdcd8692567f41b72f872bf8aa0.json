{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import io from\"socket.io-client\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const AccidentAlers=()=>{const[messages,setMessages]=useState([]);useEffect(()=>{// Replace 'http://13.51.79.199:3001' with the URL where your Socket.IO server is running\nconst socket=io(\"http://13.51.79.199:3002\");// Replace 'SN0013' with the specific thingName you are interested in\nconst thingName=\"SN0014\";// Event handler for receiving messages from the server based on thingName\nsocket.on(thingName,message=>{console.log(\"Received message for \".concat(thingName,\" from server:\"),message);setMessages(prevMessages=>[...prevMessages,message]);});// Event handler for connecting to the Socket.IO server\nsocket.on(\"connect\",()=>{console.log(\"Connected to Socket.IO server\");// Emit a 'join' event to join a room based on thingName\n// socket.emit(\"join\", thingName);\n});// Event handler for potential errors\nsocket.on(\"error\",error=>{console.error(\"Socket.IO error:\",error);// Handle the error as needed\n});// Cleanup on component unmount\nreturn()=>{console.log(\"Disconnecting from Socket.IO server\");socket.disconnect();};},[]);// Empty dependency array ensures that the effect runs only once\n// Log the current state of messages whenever it changes\nuseEffect(()=>{console.log(\"Current messages state:\",messages);},[messages]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Received AWS IoT Messages for SN0013:\"}),/*#__PURE__*/_jsx(\"ul\",{children:messages.map((message,index)=>/*#__PURE__*/_jsx(\"li\",{children:JSON.stringify(message)},index))})]});};export default AccidentAlers;","map":{"version":3,"names":["React","useEffect","useState","io","jsx","_jsx","jsxs","_jsxs","AccidentAlers","messages","setMessages","socket","thingName","on","message","console","log","concat","prevMessages","error","disconnect","children","map","index","JSON","stringify"],"sources":["C:/Users/ASUS/Documents/GitHub/e19-3yp-School-Van-Tracking-System/code/webapplication/src/components/accidentAlerts.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst AccidentAlers = () => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Replace 'http://13.51.79.199:3001' with the URL where your Socket.IO server is running\r\n    const socket = io(\"http://13.51.79.199:3002\");\r\n\r\n    // Replace 'SN0013' with the specific thingName you are interested in\r\n    const thingName = \"SN0014\";\r\n\r\n    // Event handler for receiving messages from the server based on thingName\r\n    socket.on(thingName, (message) => {\r\n      console.log(`Received message for ${thingName} from server:`, message);\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    // Event handler for connecting to the Socket.IO server\r\n    socket.on(\"connect\", () => {\r\n      console.log(\"Connected to Socket.IO server\");\r\n\r\n      // Emit a 'join' event to join a room based on thingName\r\n      // socket.emit(\"join\", thingName);\r\n    });\r\n\r\n    // Event handler for potential errors\r\n    socket.on(\"error\", (error) => {\r\n      console.error(\"Socket.IO error:\", error);\r\n      // Handle the error as needed\r\n    });\r\n\r\n    // Cleanup on component unmount\r\n    return () => {\r\n      console.log(\"Disconnecting from Socket.IO server\");\r\n      socket.disconnect();\r\n    };\r\n  }, []); // Empty dependency array ensures that the effect runs only once\r\n\r\n  // Log the current state of messages whenever it changes\r\n  useEffect(() => {\r\n    console.log(\"Current messages state:\", messages);\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Received AWS IoT Messages for SN0013:</h1>\r\n      <ul>\r\n        {messages.map((message, index) => (\r\n          <li key={index}>{JSON.stringify(message)}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccidentAlers;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,EAAE,KAAM,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAElC,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CAE5CD,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAU,MAAM,CAAGR,EAAE,CAAC,0BAA0B,CAAC,CAE7C;AACA,KAAM,CAAAS,SAAS,CAAG,QAAQ,CAE1B;AACAD,MAAM,CAACE,EAAE,CAACD,SAAS,CAAGE,OAAO,EAAK,CAChCC,OAAO,CAACC,GAAG,yBAAAC,MAAA,CAAyBL,SAAS,kBAAiBE,OAAO,CAAC,CACtEJ,WAAW,CAAEQ,YAAY,EAAK,CAAC,GAAGA,YAAY,CAAEJ,OAAO,CAAC,CAAC,CAC3D,CAAC,CAAC,CAEF;AACAH,MAAM,CAACE,EAAE,CAAC,SAAS,CAAE,IAAM,CACzBE,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAE5C;AACA;AACF,CAAC,CAAC,CAEF;AACAL,MAAM,CAACE,EAAE,CAAC,OAAO,CAAGM,KAAK,EAAK,CAC5BJ,OAAO,CAACI,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CACxC;AACF,CAAC,CAAC,CAEF;AACA,MAAO,IAAM,CACXJ,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAClDL,MAAM,CAACS,UAAU,CAAC,CAAC,CACrB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAAE;AAER;AACAnB,SAAS,CAAC,IAAM,CACdc,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEP,QAAQ,CAAC,CAClD,CAAC,CAAE,CAACA,QAAQ,CAAC,CAAC,CAEd,mBACEF,KAAA,QAAAc,QAAA,eACEhB,IAAA,OAAAgB,QAAA,CAAI,uCAAqC,CAAI,CAAC,cAC9ChB,IAAA,OAAAgB,QAAA,CACGZ,QAAQ,CAACa,GAAG,CAAC,CAACR,OAAO,CAAES,KAAK,gBAC3BlB,IAAA,OAAAgB,QAAA,CAAiBG,IAAI,CAACC,SAAS,CAACX,OAAO,CAAC,EAA/BS,KAAoC,CAC9C,CAAC,CACA,CAAC,EACF,CAAC,CAEV,CAAC,CAED,cAAe,CAAAf,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}