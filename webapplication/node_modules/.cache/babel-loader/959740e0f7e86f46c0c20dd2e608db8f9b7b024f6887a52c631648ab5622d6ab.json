{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\GitHub\\\\e19-3yp-School-Van-Tracking-System\\\\code\\\\webapplication\\\\src\\\\components\\\\verify.jsx\";\nimport React from \"react\";\nimport Joi from \"joi-browser\";\nimport Form from \"./common/form\";\nimport { verify } from \"../services/signUpService\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport \"./login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass verifyForm extends Form {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {\n        username: \"\",\n        password: \"\",\n        verificationCode: \"\"\n      },\n      errors: {},\n      successMessage: \"\"\n    };\n    this.schema = {\n      username: Joi.string().required().label(\"Username\"),\n      password: Joi.string().required().label(\"Password\"),\n      verificationCode: Joi.string().required().label(\"Verification Code\")\n    };\n    this.doSubmit = async () => {\n      try {\n        const {\n          data\n        } = this.state;\n        await verify({\n          username: data.username,\n          password: data.password,\n          verificationCode: data.verificationCode\n        });\n        // Optionally, you can redirect the user or perform other actions after the bus is successfully added.\n        console.log(\"User verified successfully!\");\n        this.props.history.push(\"/loginForm\");\n      } catch (error) {\n        console.error(\"Error verifying user:\", error.message);\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"login-form\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Verify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this), this.renderInput(\"username\", \"Username\"), this.renderInput(\"password\", \"Password\", \"password\"), this.renderInput(\"verificationCode\", \"Verification Code\"), this.renderButton(\"Verify\"), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/loginForm\",\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\nexport default withRouter(verifyForm);","map":{"version":3,"names":["React","Joi","Form","verify","Link","withRouter","jsxDEV","_jsxDEV","Fragment","_Fragment","verifyForm","constructor","args","state","data","username","password","verificationCode","errors","successMessage","schema","string","required","label","doSubmit","console","log","props","history","push","error","message","render","children","className","onSubmit","handleSubmit","fileName","_jsxFileName","lineNumber","columnNumber","renderInput","renderButton","to"],"sources":["C:/Users/ASUS/Documents/GitHub/e19-3yp-School-Van-Tracking-System/code/webapplication/src/components/verify.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Joi from \"joi-browser\";\r\nimport Form from \"./common/form\";\r\nimport { verify } from \"../services/signUpService\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport \"./login.css\";\r\n\r\nclass verifyForm extends Form {\r\n  state = {\r\n    data: {\r\n      username: \"\",\r\n      password: \"\",\r\n      verificationCode: \"\",\r\n    },\r\n    errors: {},\r\n    successMessage: \"\",\r\n  };\r\n\r\n  schema = {\r\n    username: Joi.string().required().label(\"Username\"),\r\n    password: Joi.string().required().label(\"Password\"),\r\n    verificationCode: Joi.string().required().label(\"Verification Code\"),\r\n  };\r\n\r\n  doSubmit = async () => {\r\n    try {\r\n      const { data } = this.state;\r\n      await verify({\r\n        username: data.username,\r\n        password: data.password,\r\n        verificationCode: data.verificationCode,\r\n      });\r\n      // Optionally, you can redirect the user or perform other actions after the bus is successfully added.\r\n      console.log(\"User verified successfully!\");\r\n      this.props.history.push(\"/loginForm\");\r\n    } catch (error) {\r\n      console.error(\"Error verifying user:\", error.message);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"login-container\">\r\n          <div className=\"login-form\">\r\n            <form onSubmit={this.handleSubmit}>\r\n              <h1>Verify</h1>\r\n              {this.renderInput(\"username\", \"Username\")}\r\n              {this.renderInput(\"password\", \"Password\", \"password\")}\r\n              {this.renderInput(\"verificationCode\", \"Verification Code\")}\r\n              {this.renderButton(\"Verify\")} <br />\r\n              <Link to=\"/loginForm\">Login</Link>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(verifyForm);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}